<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>MCQ Test</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        .btn-outline-primary {
            margin-right: 85%;
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <div class="card shadow">
            <div class="card-header text-center">
                
                <h3>Skill Assessment Test</h3>
                <p class="text-muted">Please answer all the questions below.</p>
            </div>
            <div class="card-body">
                <!-- Question Section -->
                <div id="question-area">
                    <h5 id="question-text" class="mb-4">Loading question...</h5>
                    <div id="options-area" class="mb-3">
                        <!-- Options will be dynamically rendered here -->
                    </div>
                </div>

                <!-- Navigation Buttons -->
                <div class="d-flex justify-content-between">
                    <button id="prev-btn" class="btn btn-outline-secondary" disabled>Previous</button>
                    <button id="next-btn" class="btn btn-outline-primary" style="display: none;">Next</button>
                </div>
                <button id="submit-btn" class="btn btn-success mt-3 w-100" style="display: none;">Submit
                    Answers</button>
            </div>
        </div>
    </div>

    <script>
        const questionText = document.getElementById('question-text');
        const optionsArea = document.getElementById('options-area');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const submitBtn = document.getElementById('submit-btn');

        let selectedAnswers = {}; // Object to keep track of selected answers
        let questions = [];
        let currentQuestionIndex = 0;

        // Fetch questions from the backend
        async function fetchQuestions() {
            try {
                const response = await fetch('/api/mcqs/question'); // Adjust this route to match your backend
                if (!response.ok) throw new Error('Failed to fetch questions');
                questions = await response.json();
                if (questions.length > 0) {
                    renderQuestion(currentQuestionIndex);
                    updateButtons();
                } else {
                    questionText.textContent = 'No questions available.';
                }
            } catch (error) {
                console.error('Error fetching questions:', error);
                questionText.textContent = 'Failed to load questions. Please try again later.';
            }
        }

        // Render the current question
        function renderQuestion(index) {
            const question = questions[index];
            questionText.textContent = question.question;
            optionsArea.innerHTML = '';

            question.options.forEach((option, i) => {
                const optionElement = document.createElement('div');
                optionElement.className = 'form-check';
                optionElement.innerHTML = `
            <input 
                class="form-check-input" 
                type="radio" 
                name="question-${question._id}" 
                id="option-${i}" 
                value="${i}" 
                ${selectedAnswers[question._id] === i ? 'checked' : ''}>
            <label class="form-check-label" for="option-${i}">
                ${option}
            </label>
        `;

                // Add change event listener to update selectedAnswers
                optionElement.querySelector('input').addEventListener('change', (e) => {
                    selectedAnswers[question._id] = parseInt(e.target.value, 10); // Store answer index
                });

                optionsArea.appendChild(optionElement);
            });
        }

        // Update button visibility and state
        function updateButtons() {
            prevBtn.disabled = currentQuestionIndex === 0;
            nextBtn.style.display = currentQuestionIndex === questions.length - 1 ? 'none' : 'inline-block';
            submitBtn.style.display = currentQuestionIndex === questions.length - 1 ? 'block' : 'none';
        }

        // Submit answers to the backend
        async function submitAnswers() {
            try {
                const answers = Object.entries(selectedAnswers).map(([questionId, answer]) => ({
                    questionId,
                    answer,
                }));

                console.log('Submitted answers:', answers); // Debugging: Log the submitted answers

                const response = await fetch('/api/mcqs/submit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ answers }),
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log(124, result.message)
                    alert('Test submitted successfully!');

                    //receive all question answer with user wrong answer list
                    //send this list to the Python API


                    const user_level_sheet = result.message

                    const response1 = await fetch('http://localhost:5000/course_suggestion', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ "user_level_sheet": user_level_sheet }),//list of array
                    });

                    if (response1.ok) {
                        const res = await response1.json();
                        alert("Received Data from Python Server: " + res.suggestion)
                        console.log(140, res.suggestion)

                        //redirect to suggesstion.ejs & send a json data
                        // Redirect to suggestion.ejs with JSON data as a query parameter
                        const suggestionData = encodeURIComponent(JSON.stringify(res)); // Encode the JSON data
                        window.location.href = `/suggestion?data=${suggestionData}`;
                    }
                    else {
                        console.log(140, response1.json())
                    }



                } else {
                    throw new Error('Submission failed');
                }
            } catch (error) {
                console.error('Error submitting answers:', error);
                alert('Failed to submit answers. Please try again.');
            }
        }

        // Event listeners for navigation buttons
        prevBtn.addEventListener('click', () => {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                renderQuestion(currentQuestionIndex);
                updateButtons();
            }
        });

        nextBtn.addEventListener('click', () => {
            if (currentQuestionIndex < questions.length - 1) {
                currentQuestionIndex++;
                renderQuestion(currentQuestionIndex);
                updateButtons();
            } 
        });

        submitBtn.addEventListener('click', submitAnswers);

        // Initialize the test
        fetchQuestions();
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous">
        </script>
</body>

</html>